"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8925],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>g});var r=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var i=r.createContext({}),u=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},b=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,a=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),b=u(n),g=s,f=b["".concat(i,".").concat(g)]||b[g]||p[g]||a;return n?r.createElement(f,o(o({ref:t},l),{},{components:n})):r.createElement(f,o({ref:t},l))}));function g(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=n.length,o=new Array(a);o[0]=b;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:s,o[1]=c;for(var u=2;u<a;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}b.displayName="MDXCreateElement"},2355:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>u});var r=n(7462),s=(n(7294),n(3905));const a={sidebar_position:4},o="Managing Subscriptions",c={unversionedId:"basic_concepts/managing_subscriptions",id:"basic_concepts/managing_subscriptions",title:"Managing Subscriptions",description:"If you want to listen to changes in a store you can subscribe to it by using store.subscribe. it accepts an observer function. For example",source:"@site/docs/basic_concepts/managing_subscriptions.md",sourceDirName:"basic_concepts",slug:"/basic_concepts/managing_subscriptions",permalink:"/state-pool/docs/basic_concepts/managing_subscriptions",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/basic_concepts/managing_subscriptions.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Derived & Nested State",permalink:"/state-pool/docs/basic_concepts/derived_state"},next:{title:"State Persistence",permalink:"/state-pool/docs/basic_concepts/state_persistence"}},i={},u=[],l={toc:u};function p(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"managing-subscriptions"},"Managing Subscriptions"),(0,s.kt)("p",null,"If you want to listen to changes in a store you can subscribe to it by using ",(0,s.kt)("inlineCode",{parentName:"p"},"store.subscribe"),". it accepts an observer function. For example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// Subscribe to store changes\nconst unsubscribe = store.subscribe(function(key: String, value: Any){\n    // key is the key for a global state that has changed \n    // value is the new value of a global state\n})\n\n// You can unsubscribe by calling the result\nunsubscribe();\n")),(0,s.kt)("p",null,"If you want to subscribe to a single global state you can use "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// Subscribe to store changes\nconst unsubscribe = store.getState(key).subscribe(function(value){\n    // value is the new value of a global state\n})\n\n// You can unsubscribe by calling the result\nunsubscribe();\n")),(0,s.kt)("p",null,"You can even subscribe to a deeply nested state by using a selector as "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"store.getState(key).subscribe({\n    observer:  function(value){\n        // value is the new value of a global state \n    },\n    selector: function(value){\n        return  selected_state\n    })\n})\n")),(0,s.kt)("p",null,"With this, observer function will only be called when the selected state changes"))}p.isMDXComponent=!0}}]);