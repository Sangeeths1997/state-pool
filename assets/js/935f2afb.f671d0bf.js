"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"category","label":"Introduction","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Motivation","href":"/state-pool/docs/introduction/motivation","docId":"introduction/motivation"},{"type":"link","label":"Installation","href":"/state-pool/docs/introduction/installation","docId":"introduction/installation"},{"type":"link","label":"Getting Started","href":"/state-pool/docs/introduction/getting_started","docId":"introduction/getting_started"}]},{"type":"category","label":"Basic Concepts","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Store","href":"/state-pool/docs/basic_concepts/store","docId":"basic_concepts/store"},{"type":"link","label":"Using Store State","href":"/state-pool/docs/basic_concepts/using_store_state","docId":"basic_concepts/using_store_state"},{"type":"link","label":"Derived & Nested State","href":"/state-pool/docs/basic_concepts/derived_state","docId":"basic_concepts/derived_state"},{"type":"link","label":"Managing Subscriptions","href":"/state-pool/docs/basic_concepts/managing_subscriptions","docId":"basic_concepts/managing_subscriptions"},{"type":"link","label":"State Persistence","href":"/state-pool/docs/basic_concepts/state_persistence","docId":"basic_concepts/state_persistence"}]},{"type":"category","label":"Basic Tutorial","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Intro","href":"/state-pool/docs/basic_tutorial/intro","docId":"basic_tutorial/intro"}]},{"type":"category","label":"API Reference","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Intro","href":"/state-pool/docs/api_reference/intro","docId":"api_reference/intro"},{"type":"category","label":"High Level API","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"createStore","href":"/state-pool/docs/api_reference/high_level_api/createStore","docId":"api_reference/high_level_api/createStore"},{"type":"link","label":"store.setState","href":"/state-pool/docs/api_reference/high_level_api/store.setState","docId":"api_reference/high_level_api/store.setState"},{"type":"link","label":"store.useState","href":"/state-pool/docs/api_reference/high_level_api/store.useState","docId":"api_reference/high_level_api/store.useState"},{"type":"link","label":"store.useReducer","href":"/state-pool/docs/api_reference/high_level_api/store.useReducer","docId":"api_reference/high_level_api/store.useReducer"},{"type":"link","label":"store.getState","href":"/state-pool/docs/api_reference/high_level_api/store.getState","docId":"api_reference/high_level_api/store.getState"},{"type":"link","label":"store.subscribe","href":"/state-pool/docs/api_reference/high_level_api/store.subscribe","docId":"api_reference/high_level_api/store.subscribe"},{"type":"link","label":"store.remove","href":"/state-pool/docs/api_reference/high_level_api/store.remove","docId":"api_reference/high_level_api/store.remove"},{"type":"link","label":"store.clear","href":"/state-pool/docs/api_reference/high_level_api/store.clear","docId":"api_reference/high_level_api/store.clear"},{"type":"link","label":"store.persist","href":"/state-pool/docs/api_reference/high_level_api/store.persist","docId":"api_reference/high_level_api/store.persist"}]},{"type":"category","label":"Low Level API","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"createGlobalState","href":"/state-pool/docs/api_reference/low_level_api/createGlobalState","docId":"api_reference/low_level_api/createGlobalState"},{"type":"link","label":"useGlobalState","href":"/state-pool/docs/api_reference/low_level_api/useGlobalState","docId":"api_reference/low_level_api/useGlobalState"},{"type":"link","label":"useGlobalStateReducer","href":"/state-pool/docs/api_reference/low_level_api/useGlobalStateReducer","docId":"api_reference/low_level_api/useGlobalStateReducer"}]},{"type":"link","label":"Typing State","href":"/state-pool/docs/api_reference/typing-state","docId":"api_reference/typing-state"}]}]},"docs":{"api_reference/high_level_api/createStore":{"id":"api_reference/high_level_api/createStore","title":"createStore","description":"Store is a container for global states, it comes with several methods which are used to manage states in it including store.setState, store.getState, store.remove, store.clear, store.useState, store.useReducer and store.subscribe. Store is created by using createStore API as","sidebar":"tutorialSidebar"},"api_reference/high_level_api/store.clear":{"id":"api_reference/high_level_api/store.clear","title":"store.clear","description":"This is used to clear an entire store if you don\'t need all global states in it anymore or you want to reload/reset all global states. It accepts a function to run after clearing the store.","sidebar":"tutorialSidebar"},"api_reference/high_level_api/store.getState":{"id":"api_reference/high_level_api/store.getState","title":"store.getState","description":"store.getState is used to get a global state object from a store, it accepts one required parameter which is a key(string) and another optional parameters which is the configuration object(available configurations are default and persist works just like in store.setState). When called, store.getState returns a global state object.","sidebar":"tutorialSidebar"},"api_reference/high_level_api/store.persist":{"id":"api_reference/high_level_api/store.persist","title":"store.persist","description":"Sometimes you might want to save your global states in a permanent storage probably because you might not want to lose them when your application is closed(i.e you want to retain them when your application starts).","sidebar":"tutorialSidebar"},"api_reference/high_level_api/store.remove":{"id":"api_reference/high_level_api/store.remove","title":"store.remove","description":"This is used to remove a global state from a store if you don\'t need it anymore or you want to reload/reset it. It accepts a key for a global state or a list of keys to remove and a function to run after removal.","sidebar":"tutorialSidebar"},"api_reference/high_level_api/store.setState":{"id":"api_reference/high_level_api/store.setState","title":"store.setState","description":"This is used to create a global state and map it to a key so that you won\'t need to use it directly, instead you use a key to get it. store.setState takes two required parameters, a key(string) to map to a global state object and the initial value, In addition to those two parameters it takes a third optional parameter which is the configuration object. persist is the only available config which is the flag to determine whether to save/persist state in a permanent storage or not.","sidebar":"tutorialSidebar"},"api_reference/high_level_api/store.subscribe":{"id":"api_reference/high_level_api/store.subscribe","title":"store.subscribe","description":"If you want to listen to changes in a store you can subscribe to it by using store.subscribe. it accepts an observer function. For example","sidebar":"tutorialSidebar"},"api_reference/high_level_api/store.useReducer":{"id":"api_reference/high_level_api/store.useReducer","title":"store.useReducer","description":"This is an alternative to store.useState, it works just like React.useReducer hook(If you\u2019re familiar with React.useReducer, you already know how this works). It accepts a reducer and a key for the global state as parameters, it returns the current state paired with a dispatch method. In addition to the two parameters it also accept another optinal perameter which is the configuration object, available configurations are default, persist, selector & patcher they work exactly the same just like in store.useState.","sidebar":"tutorialSidebar"},"api_reference/high_level_api/store.useState":{"id":"api_reference/high_level_api/store.useState","title":"store.useState","description":"store.useState is a hook that\'s used to get a global state from a store, it\'s a way for a component to subscribe to a global state from a store. store.useState works just like React.useState hook but it accepts a key for the global state and returns an array of [state, setState, updateState] rather than [state, setState]. In addition to the key parameter it also accept another optional parameter which is the config object, available configurations are default, persist, selector & patcher, these will be discussed in detail later.","sidebar":"tutorialSidebar"},"api_reference/intro":{"id":"api_reference/intro","title":"Intro","description":"State pool API is divided into two parts.","sidebar":"tutorialSidebar"},"api_reference/low_level_api/createGlobalState":{"id":"api_reference/low_level_api/createGlobalState","title":"createGlobalState","description":"This is the basic unit of state-pool, it\'s a function which is used to create a global state object, it accepts one parameter which is the initial value.","sidebar":"tutorialSidebar"},"api_reference/low_level_api/useGlobalState":{"id":"api_reference/low_level_api/useGlobalState","title":"useGlobalState","description":"useGlobalState is a hook that used within a react component to subscribe to a global state. useGlobalState works just like React.useState hook but it accepts a global state object and returns an array of [state, setState, updateState] rather than [state, setState]. In addition to a global state object parameter it also accept another optional parameter which is the config object, available configurations are selector & patcher, these parameters works exactly the same as in store.useState. We could say useGlobalState is a low level implementation of store.useState.","sidebar":"tutorialSidebar"},"api_reference/low_level_api/useGlobalStateReducer":{"id":"api_reference/low_level_api/useGlobalStateReducer","title":"useGlobalStateReducer","description":"This is an alternative to useGlobalState, it works just like React.useReducer hook(If you\u2019re familiar with React.useReducer, you already know how this works). It accepts a reducer and a global state object as parameters, it returns the current state paired with a dispatch method. In addition to the two parameters it also accept another optinal perameter which is the configuration object, available configurations are selector and patcher they work exactly the same just like in useGlobalState.","sidebar":"tutorialSidebar"},"api_reference/typing-state":{"id":"api_reference/typing-state","title":"Typing State","description":"All state related functions support implicity and explicity typing","sidebar":"tutorialSidebar"},"basic_concepts/derived_state":{"id":"basic_concepts/derived_state","title":"Derived & Nested State","description":"With state pool you can subscribe to deeply nested global state or a derived state. Both store.useState and store.useReducer accepts an optional configuration parameter with which you can pass selector & patcher options that are used to derive and update state.","sidebar":"tutorialSidebar"},"basic_concepts/managing_subscriptions":{"id":"basic_concepts/managing_subscriptions","title":"Managing Subscriptions","description":"If you want to listen to changes in a store you can subscribe to it by using store.subscribe. it accepts an observer function. For example","sidebar":"tutorialSidebar"},"basic_concepts/state_persistence":{"id":"basic_concepts/state_persistence","title":"State Persistence","description":"State pool has a built in support for state persistence, it makes saving your global states in your preferred permanent storage very easy, all you need to do is tell state pool how to save, load, clear and remove your global state from your preferred storage by using store.persist API.","sidebar":"tutorialSidebar"},"basic_concepts/store":{"id":"basic_concepts/store","title":"Store","description":"A store is a container for global states. Store implements and encapsulates everything you need to manage your global states including store.setState, store.getState, store.useState, store.subscribe and other functionalities. A store is created by using createStore API as","sidebar":"tutorialSidebar"},"basic_concepts/using_store_state":{"id":"basic_concepts/using_store_state","title":"Using Store State","description":"After creating a store and setting states to it we need to use our states in components. Here a store provides store.useState hook which is used to consume a state from a store in a component, it\'s basically a way for a component to subscribe to a global state from a store.","sidebar":"tutorialSidebar"},"basic_tutorial/intro":{"id":"basic_tutorial/intro","title":"Intro","description":"Coming soon....","sidebar":"tutorialSidebar"},"introduction/getting_started":{"id":"introduction/getting_started","title":"Getting Started","description":"Using state-pool to manage global state is very simple, all you need to do is","sidebar":"tutorialSidebar"},"introduction/installation":{"id":"introduction/installation","title":"Installation","description":"Or","sidebar":"tutorialSidebar"},"introduction/motivation":{"id":"introduction/motivation","title":"Motivation","description":"Build Status","sidebar":"tutorialSidebar"}}}')}}]);