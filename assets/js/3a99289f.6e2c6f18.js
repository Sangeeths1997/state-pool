"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9502],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>b});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(a),b=r,d=m["".concat(s,".").concat(b)]||m[b]||u[b]||l;return a?n.createElement(d,o(o({ref:t},p),{},{components:a})):n.createElement(d,o({ref:t},p))}));function b(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var c=2;c<l;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},1296:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var n=a(7462),r=(a(7294),a(3905));const l={sidebar_position:1},o="createGlobalState",i={unversionedId:"api_reference/low_level_api/createGlobalState",id:"api_reference/low_level_api/createGlobalState",title:"createGlobalState",description:"This is the basic unit of state-pool, it's a function which is used to create a global state object, it accepts one parameter which is the initial value.",source:"@site/docs/api_reference/low_level_api/createGlobalState.md",sourceDirName:"api_reference/low_level_api",slug:"/api_reference/low_level_api/createGlobalState",permalink:"/state-pool/docs/api_reference/low_level_api/createGlobalState",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api_reference/low_level_api/createGlobalState.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"store.persist",permalink:"/state-pool/docs/api_reference/high_level_api/store.persist"},next:{title:"useGlobalState",permalink:"/state-pool/docs/api_reference/low_level_api/useGlobalState"}},s={},c=[],p={toc:c};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"createglobalstate"},"createGlobalState"),(0,r.kt)("p",null,"This is the basic unit of ",(0,r.kt)("strong",{parentName:"p"},"state-pool"),", it's a function which is used to create a global state object, it accepts one parameter which is the initial value."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// Signature\ncreateGlobalState(initialValue: Any)\n")),(0,r.kt)("p",null,"Here is how to use it"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { createGlobalState } from 'state-pool';\n\nconst userName = createGlobalState(\"Yezy\");\n")),(0,r.kt)("p",null,"Some of the methods available in a global state object are ",(0,r.kt)("inlineCode",{parentName:"p"},"getValue"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"updateValue")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"subscribe")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"getValue"),": This is used to get the value of a global state",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// Signature\nglobalState.getValue(selector?: Function);\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"setValue"),": This is used to set the value of a global state",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// Signature\nglobalState.setValue(value | stateUpdater: Any | Function, config?: {selector, patcher});\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"updateValue"),": This is used to update the value of a global state",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// Signature\nglobalState.updateValue(updater: Function, config?: {selector, patcher});\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"subscribe"),": This is used to listen to all changes from a global state",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// Signature\nglobalState.subscribe(observer: Function | Subscription: {observer, selector});\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"select"),": This is used to derive another state or select a deeply nested state",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// Signature\nglobalState.select(selector: Function);\n")),"This returns ",(0,r.kt)("inlineCode",{parentName:"li"},"DerivedGlobalState")," that you can subscribe to by calling ",(0,r.kt)("inlineCode",{parentName:"li"},"subscribe")," on it as",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// Signature\nglobalState.select(selector: Function).subscribe(observer: Function);\n")))),(0,r.kt)("p",null,"Below is an example showing all of them in action"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { createGlobalState } from 'state-pool';\n\nconst count = createGlobalState(0);\n\ncount.getValue()  // This will give 0\n\ncount.setValue(1)  // This set the value of count to 1\n\n// This will print whenever count change\nconst unsubscribe = count.subscribe(val => console.log(val)) \n\nunsubscribe()  // This will unsubscribe the observer above\n\n// An example for nested state\nconst user = createGlobalState({name: \"Yezy\", weight: 65});\n\nuser.updateValue(user => {user.weight += 1})  // This will increment the weight\n\n// Select user name and subscribe to it,\n// this will be printing whenever user name changes\nuser.select(user => user.name).subscribe(name => console.log(name));\n")),(0,r.kt)("admonition",{type:"important"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"createGlobalState")," should be used outside of a react component. ")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"createGlobalState")," is used to implement ",(0,r.kt)("inlineCode",{parentName:"p"},"store.setState")," API. ")))}u.isMDXComponent=!0}}]);